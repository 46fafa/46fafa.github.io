name: Deploy Hugo Blog to GitHub Pages

on:
  push:
    branches:
      - main # 当私人仓库的 main 分支有新的 push 时触发
  workflow_dispatch:
  schedule:
    - cron: '* 0 * * *'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Private Source Repository # 1. 检查私人源码仓库
        uses: actions/checkout@v4
        with:
          submodules: true # 如果你的 Hugo 主题是作为 Git 子模块添加的，需要这一行
          fetch-depth: 0 # 如果你的 Hugo 博客使用了 Git Info shortcodes，需要这一行

      - name: Setup Hugo # 2. 设置 Hugo 环境
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.137.0' # <--- IMPORTANT: 请将 '0.123.7' 替换为你实际使用的 Hugo 版本
          extended: true # 如果你的 Hugo 主题使用了 SCSS/SASS，请设置为 true，否则可以删除或设置为 false

      - name: Build Hugo Site # 3. 构建 Hugo 静态站点
        run: hugo --minify # --minify 参数可以压缩生成的 HTML/CSS/JS 文件

      - name: Deploy to GitHub Pages # 4. 部署到公共 GitHub Pages 仓库
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.DEPLOY_TOKEN }} # 使用之前在私人仓库中设置的 Secret
          external_repository: 46fafa/46fafa.github.io # <--- IMPORTANT: 你的公共部署仓库地址
          publish_dir: ./public # Hugo 构建的默认输出目录
          publish_branch: main # <--- IMPORTANT: 你的公共部署仓库的发布分支（对于用户/组织页面通常是 main）
          commit_message: "Deploy Hugo site from 46fafa/blog@${{ github.sha }}" # 提交信息，方便追溯
          user_name: 'github-actions[bot]' # 提交者名称，可以是你自己的 GitHub 用户名
          user_email: 'github-actions[bot]@users.noreply.github.com' # 提交者邮箱
